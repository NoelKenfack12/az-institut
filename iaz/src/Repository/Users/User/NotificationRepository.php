<?php

namespace App\Repository\Users\User;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * NotificationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NotificationRepository extends EntityRepository
{
public function findNotifUser($id,$page, $nombreParPage)
{
	if ($page < 1){
	throw new \InvalidArgumentException('Page inexistant');
	}
	$query = $this->createQueryBuilder('n')
	              ->leftJoin('n.user','u')
				  ->addSelect('u')
	              ->where('u.id = :id AND n.transaction = 0 AND n.afhads = 1')
	              ->setParameter('id',$id)
				  ->orderBy('n.date','DESC')
                  ->getQuery();
	$query->setFirstResult(($page-1) * $nombreParPage)
		  ->setMaxResults($nombreParPage);
	return new Paginator($query);
}

public function findNotifUserWin($id,$page, $nombreParPage)
{
	if ($page < 1){
	throw new \InvalidArgumentException('Page inexistant');
	}
	$query = $this->createQueryBuilder('n')
	              ->leftJoin('n.user','u')
				  ->addSelect('u')
	              ->where('u.id = :id AND n.transaction = 0 AND n.afhwin = 1')
	              ->setParameter('id',$id)
				  ->orderBy('n.date','DESC')
                  ->getQuery();
	$query->setFirstResult(($page-1) * $nombreParPage)
		  ->setMaxResults($nombreParPage);
	return new Paginator($query);
}

public function getSumDepotValide($id)
{
	$query = $this->_em->createQuery('SELECT SUM(n.depot) FROM UsersUserBundle:Notification n, UsersUserBundle:User u  WHERE n.user = u AND u.id = :id AND n.transaction = 1 AND n.depot > 0 AND n.valide = 1 AND n.afhads = 1');
	$query->setParameter('id', $id);
	return $query->getSingleScalarResult();
}

public function getSumRetraitValide($id)
{
	$query = $this->_em->createQuery('SELECT SUM(n.retrait) FROM UsersUserBundle:Notification n, UsersUserBundle:User u WHERE n.user = u AND u.id = :id AND n.transaction = 1 AND n.retrait > 0 AND n.valide = 1 AND n.afhads = 1');
	$query->setParameter('id', $id);
	return $query->getSingleScalarResult();
}

public function getSumVerseValide($id)
{
	$query = $this->_em->createQuery('SELECT SUM(n.retrait) FROM UsersUserBundle:Notification n, UsersUserBundle:User u WHERE n.user = u AND u.id = :id AND n.transaction = 1 AND n.retrait > 0 AND n.valide = 1 AND n.afhwin = 1');
	$query->setParameter('id', $id);
	return $query->getSingleScalarResult();
}

public function findOperationUser($id,$page, $nombreParPage)
{
	if ($page < 1){
	throw new \InvalidArgumentException('Page inexistant');
	}
	$query = $this->createQueryBuilder('n')
	              ->leftJoin('n.user','u')
				  ->addSelect('u')
	              ->where('u.id = :id AND n.transaction = 1')
	              ->setParameter('id',$id)
				  ->orderBy('n.date','DESC')
                  ->getQuery();
	$query->setFirstResult(($page-1) * $nombreParPage)
		  ->setMaxResults($nombreParPage);
	return new Paginator($query);
}

public function myFindOperationFinaciere($page, $nombreParPage)
{
	if ($page < 1){
	throw new \InvalidArgumentException('Page inexistant');
	}
	$query = $this->createQueryBuilder('n')
	              ->leftJoin('n.user','u')
				  ->addSelect('u')
	              ->where('n.transaction = 1')
				  ->orderBy('n.date','DESC')
                  ->getQuery();
	$query->setFirstResult(($page-1) * $nombreParPage)
		  ->setMaxResults($nombreParPage);
	return new Paginator($query);
}
}
